Desafio 03:
inicio 05-11

Lista de tarefas: 05-nov
[x] implementar rotina de tratamento de erro.
[x] revisar autenticação de ususários e ajustar token
[x] criar modulo de variaveis de ambiente
[x] ajustar retorno idade automatica de acordo com data nascimento.

lista tarefas : 06-Nov
[x] gestão de plano - criar migrations plans
[x] criar cadastro plano
[x] criar atualização plano
[x] criar rota listagem
[x] cirar rota remoção/desativar plano
[x] cadastrar planos

Lista tarefas : 07-Nov a 9-Nov
[x] Criar migration Matricula
[x] Criar relacionamento entre tabelas
[x] Criar Cadastro da Matricula
[x] Ajustar cadastro para data de termino calcular de acordo com dados plano.
[x] AJustar calculo automatico do preço.
[x] Criar atualização
[x] criar remoção, detativação
[x] criar Listagen de matriculas
[x] criar função envio de email apos matricula realizada.
[x] estelizar basico com html email - criar template
[] crir rotina de fila de emails
[] formatar valores monetario e data e hora tamplate email.
[] criar rotina de fila Obs: não esta enviando mas tb não da erro!

Tarefas 10-Nov

[] check in
[] crir migration
[] criar checkin controller
[] criar rotas
[] criar consulta de todos os checkins
[] criar bloqueio para checkins mais de 5 x em 7 dias corridos


[] pedido de ajuda.

1. Checkins
Quando o aluno chega na academia o mesmo realiza um check-in apenas informando
seu ID de cadastro (ID do banco de dados);

Esse check-in serve para monitorar quantas vezes o usuário frequentou a academia
 na semana.

A tabela de checkins possui os campos:

student_id (referência ao aluno);
created_at;
updated_at;
O usuário só pode fazer 5 checkins dentro de um período de 7 dias corridos.

Exemplo de requisição: POST https://gympoint.com/students/3/checkins

Crie uma rota para listagem de todos checkins realizados por um usuário com base
 em seu ID de cadastro;

Exemplo de requisição: GET https://gympoint.com/students/3/checkins

************** instrução *************
Funcionalidades do administrador
Abaixo estão descritas as funcionalidades que você deve adicionar em sua
aplicação para administradores.

1. Gestão de planos
Permita que o usuário possa cadastrar planos para matrícula de alunos, o plano
deve possuir os seguintes campos:

title (nome do plano);
duration (duração em número de meses);
price (preço mensal do plano);
created_at;
updated_at;
Crie alguns planos como por exemplo:

Start: Plano de 1 mês por R$129;
Gold: Plano de 3 meses por R$109/mês;
Diamond: Plano de 6 meses por R$89/mês;
Crie rotas para listagem/cadastro/atualização/remoção de planos;

Obs.: Essa funcionalidade é para administradores autenticados na aplicação.

2. Gestão de matrículas
Apesar do aluno estar cadastrado na plataforma, isso não significa que o mesmo
tem uma matrícula ativa e que pode acessar a academia.

Nessa funcionalidade criaremos um cadastro de matrículas por aluno, a matrícula
 possui os campos:

student_id (referência ao aluno);
plan_id (referência ao plano);
start_date (data de início da matrícula);
end_date (date de término da matrícula);
price (preço total calculado na data da matrícula);
created_at;
updated_at;
A data de início da matrícula deve ser escolhida pelo usuário.

A data de término e preço da matrícula deve ser calculada com base no plano
selecionado, por exemplo:

Data de início informada: 23/05/2019 Plano selecionado: Gold (3 meses) Data de
término calculada: 23/08/2019 (3 meses depois do início) Preço calculado: R$327

Quando um aluno realiza uma matrícula ele recebe um e-mail com detalhes da sua
inscrição na academia como plano, data de término, valor e uma mensagem de
boas-vidas.

Crie rotas para listagem/cadastro/atualização/remocação de matrículas;

Obs.: Essa funcionalidade é para administradores autenticados na aplicação.

Funcionalidades do aluno
Abaixo estão descritas as funcionalidades que você deve adicionar em sua
aplicação para alunos.

1. Checkins
Quando o aluno chega na academia o mesmo realiza um check-in apenas informando
seu ID de cadastro (ID do banco de dados);

Esse check-in serve para monitorar quantas vezes o usuário frequentou a academia
 na semana.

A tabela de checkins possui os campos:

student_id (referência ao aluno);
created_at;
updated_at;
O usuário só pode fazer 5 checkins dentro de um período de 7 dias corridos.

Exemplo de requisição: POST https://gympoint.com/students/3/checkins

Crie uma rota para listagem de todos checkins realizados por um usuário com base
 em seu ID de cadastro;

Exemplo de requisição: GET https://gympoint.com/students/3/checkins

2. Pedidos de auxílio
O aluno pode criar pedidos de auxílio para a academia em relação a algum
exercício, alimentação ou instrução qualquer;

A tabela help_orders deve conter os seguintes campos:

student_id (referência ao aluno);
question (pergunta do aluno em texto);
answer (resposta da academia em texto);
answer_at (data da resposta da academia);
created_at;
updated_at;
Crie uma rota para a academia listar todos pedidos de auxílio sem resposta;

Crie uma rota para o aluno cadastrar pedidos de auxílio apenas informando seu
ID de cadastro (ID do banco de dados);

Exemplo de requisição: POST https://gympoint.com/students/3/help-orders

Crie uma rota para listar todos pedidos de auxílio de um usuário com base em
seu ID de cadastro;

Exemplo de requisição: GET https://gympoint.com/students/3/help-orders

Crie uma rota para a academia responder um pedido de auxílio:

Exemplo de requisição: POST https://gympoint.com/help-orders/1/answer

Quando um pedido de auxílio for respondido, o aluno deve receber um e-mail da
plataforma com a pergunta e resposta da academia;


FIM







jwt:aplicação_gympoint
02b1e9e912535e7907125d15e883a873

Tarefas - Criação AppGymPoint:
Fase 1:

  [OK] Criar a aplicação do zero:
  [OK] Utilizando o Express:
  [OK] Sucrase + Nodemon:
  [ok] Docker.
  [OK] ESLint + Prettier + EditorConfig;
  [ok] Sequelize (Utilize PostgreSQL ou MySQL);
  [ok] Criar repositorio git
  [ok] subir app para github
  [ok] Criar user Admim com recurso seeds
  [ok] Autenticar Usuário Admim jwt
  [Ok] criar migrations students ( deletar fazer depois, não pede da tarefa;)


Funcionalidades

1. Autenticação
  Permita que um usuário se autentique em sua aplicação utilizando e-mail e uma senha.
  Crie um usuário administrador utilizando a funcionalidade de seeds do sequelize,
  essa funcionalidade serve para criarmos registros na base de dados de forma automatizada.

[OK] Para criar um seed utilize o comando:

yarn sequelize seed:generate --name admin-user
No arquivo gerado na pasta src/database/seeds adicione o código referente à criação de um usuário administrador:

const bcrypt = require("bcryptjs");

module.exports = {
  up: QueryInterface => {
    return QueryInterface.bulkInsert(
      "users",
      [
        {
          name: "Administrador",
          email: "admin@gympoint.com",
          password_hash: bcrypt.hashSync("123456", 8),
          created_at: new Date(),
          updated_at: new Date()
        }
      ],
      {}
    );
  },

  down: () => {}
};
Agora execute:

yarn sequelize db:seed:all

Agora você tem um usuário na sua base de dados, utilize esse usuário para todos logins daqui pra frente.

A autenticação deve ser feita utilizando JWT.
Realize a validação dos dados de entrada;

2. Cadastro de alunos
Permita que alunos sejam mantidos (cadastrados/atualizados) na aplicação
utilizando nome, email, idade, peso e altura.

Utilize uma nova tabela no banco de dados chamada students.

O cadastro de alunos só pode ser feito por administradores autenticados na aplicação.

O aluno não pode se autenticar no sistema, ou seja, não possui senha.



***** continuação registry controller
// Atualização Plano

  async update(req, res) {
    // Validação dos dados de entrada
    const schema = Yup.object().shape({
      student_id: Yup.integer(),
      plan_id: Yup.integer(),
      start_date: Yup.date(),
      end_date: Yup.date(),
      price: Yup.number()
        .required()
        .positive(),
      active: Yup.boolean(),
    });
    if (!(await schema.isValid(req.body))) {
      // req,body passa valores que schima que valida as entradas
      return res
        .status(400)
        .json({ error: 'Dados com formato inválido ou ausente!' });
    }

    // procura estudante pela chave primária, se não encontra retorna mensagm de erro.
    const studentExists = await Students.findByPk(req.params.id); // varialvel studentExists armazena resultado da busca

    if (!studentExists) {
      return res.status(400).json({ error: 'Estudante não encontrado!' });
    }
    // procura plano pela chave primária, se não encontra retorna mensagm de erro.
    const studentExists = await Students.findByPk(req.params.id); // varialvel studentExists armazena resultado da busca

    if (!studentExists) {
      return res.status(400).json({ error: 'Plano não encontrado!' });
    }

    // se encontrou o estudante, faz as alterações e envia dados alterados ao front end.
    const {
      id,
      name,
      email,
      gender,
      age,
      birth_date,
      weight,
      height,
    } = await studentExists.update(req.body);

    return res.json({
      id,
      name,
      email,
      gender,
      birth_date,
      age,
      weight,
      height,
    });
  }

  // Listagem
  async index(req, res) {
    const allStudents = await Students.findAll();
    return res.json(allStudents);
  }
